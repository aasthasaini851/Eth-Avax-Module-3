// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AasthaToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    address public owner;
    bool public paused;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Pause();
    event Unpause();

    constructor() {
        name = "AasthaToken";
        symbol = "AsT";
        decimals = 1; // Adjusted decimals to 1
        totalSupply = 100 * 100** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
        paused = false;

        mintTokens(msg.sender, 2000 * 20**uint256(decimals));
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    modifier whenNotPaused() {
        require(!paused, "Token transfers are paused.");
        _;
    }

   
    function mintTokens(address to, uint256 amount) internal {
        require(to != address(0), "Invalid address");
        totalSupply += amount;
        balanceOf[to] += amount;
        emit Mint(to, amount);
        emit Transfer(address(0), to, amount);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        mintTokens(to, amount);
    }

    function burn(uint256 amount) public whenNotPaused {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        balanceOf[msg.sender] -= amount;
        totalSupply -= amount;
        emit Transfer(msg.sender, address(0), amount);
    }

    function transfer(address to, uint256 amount) public whenNotPaused {
        require(to != address(0), "Invalid address");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
    }
}
